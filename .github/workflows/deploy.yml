permissions:
  contents: read
name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  REDIS_URL: ${{ secrets.REDIS_URL }}

jobs:
  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    permissions:
      contents: read
    environment: ${{ github.event.inputs.environment || 'production' }}
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      
      - name: Setup SSH
        uses: webfactory/ssh-agent@dc588b651fe13675774614f8e6a936a468676387
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      
      - name: Add server to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
      
      - name: Deploy to server
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'ENDSSH'
            cd /root/portfolio-website
            
            # Backup current deployment
            docker compose -f docker-compose.prod.yml down
            cp -r .next .next.backup || true
            
            # Pull latest changes
            git fetch origin main
            git reset --hard origin/main
            
            # Build and deploy
            docker compose -f docker-compose.prod.yml build
            docker compose -f docker-compose.prod.yml up -d
            
            # Health check
            sleep 10
            
            # Check main application health
            if ! curl -f http://localhost:3000/api/health; then
              echo "Application health check failed, rolling back"
              docker compose -f docker-compose.prod.yml down
              mv .next.backup .next
              docker compose -f docker-compose.prod.yml up -d
              exit 1
            fi
            
            # Check Redis connectivity
            if ! curl -f http://localhost:3000/api/health/redis; then
              echo "Redis health check failed, rolling back"
              docker compose -f docker-compose.prod.yml down
              mv .next.backup .next
              docker compose -f docker-compose.prod.yml up -d
              exit 1
            fi
            
            echo "All health checks passed - deployment successful"
            rm -rf .next.backup
          ENDSSH
      
      - name: Verify deployment
        run: |
          sleep 5
          curl -I https://${{ secrets.PRODUCTION_URL }}
      
      - name: Notify deployment
        if: always()
        uses: 8398a7/action-slack@f3635935f58910a6d6951b73efe9037c960c8c04
        with:
          status: ${{ job.status }}
          text: |
            Deployment to ${{ github.event.inputs.environment || 'production' }} ${{ job.status }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        continue-on-error: true

  # Alternative: Deploy using Docker Registry
  deploy-with-registry:
    name: Deploy via Registry
    runs-on: ubuntu-latest
    if: false  # Enable this if you prefer registry-based deployment
    environment: production
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@ca052bb54ab0790a636c9b5f226502c73d547a25
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
      
      - name: Deploy to server
        uses: appleboy/ssh-action@55dabf81b49d4120609345970c91507e2d734799
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /root/portfolio-website
            
            # Login to registry
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Pull and deploy new image
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} portfolio-website:latest
            
            # Update and restart
            docker compose -f docker-compose.prod.yml up -d
            
            # Cleanup old images
            docker image prune -f