name: CI/CD Pipeline

on:
  push:
    branches: [main, development]
  pull_request:
    branches: [main]

env:
  REGISTRY: docker.io
  IMAGE_NAME: gioguarin/portfolio-website
  REDIS_URL: redis://localhost:6379

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      REDIS_URL: redis://localhost:6379
    steps:
    - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
    
    - name: Setup Node.js
      uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint
    
    - name: Run type checking
      run: npm run build
    
    - name: Run tests
      run: npm test --if-present

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/development')
    permissions:
      contents: read
      packages: write
    env:
      REDIS_URL: redis://localhost:6379
    
    steps:
    - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435
    
    - name: Log in to Docker Hub
      uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        target: production

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
    
    steps:
    - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
    
    - name: Configure kubectl
      uses: azure/setup-kubectl@3e0aec4d80787158d308d7b364cb1b702e7feb7f
      with:
        version: 'latest'
    
    - name: Set up Kubeconfig
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBECONFIG }}" | base64 -d > $HOME/.kube/config
    
    - name: Deploy to Kubernetes
      run: |
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/frontend/
        kubectl apply -f k8s/ingress/
        kubectl rollout restart deployment/portfolio-frontend -n portfolio
        kubectl rollout status deployment/portfolio-frontend -n portfolio